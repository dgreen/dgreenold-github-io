<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: NetBeans | Glimmer]]></title>
  <link href="https://glimmer.gwizlabs.net/blog/categories/netbeans/atom.xml" rel="self"/>
  <link href="https://glimmer.gwizlabs.net/"/>
  <updated>2021-07-22T08:58:47-05:00</updated>
  <id>https://glimmer.gwizlabs.net/</id>
  <author>
    <name><![CDATA[David Green]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Update to Using Maven to Build Executable Jar Files]]></title>
    <link href="https://glimmer.gwizlabs.net/blog/2021/07/13/update-to-using-maven-to-build-executable-jar-files/"/>
    <updated>2021-07-13T22:26:00-05:00</updated>
    <id>https://glimmer.gwizlabs.net/blog/2021/07/13/update-to-using-maven-to-build-executable-jar-files</id>
    <content type="html"><![CDATA[<p>This is an update to an <a href="/blog/2019/09/15/onward-to-maven/">earlier post</a>.</p>

<p>At the time of writing, <a href="https://netbeans.apache.org"><em>Apache NetBeans</em></a> is at version 12.4 and there are severl suppliers of JDKs.  The latest LTS version is JDK 11 and the latest MTS is JDK15.</p>

<p><a href="https://maven.apache.org">Apache Maven</a> remains the preferred build automation from for new projects.</p>

<p>One area that is remains unpolished (IMO) is the building of a <em>jar</em> file that can be run from the command line.  The menu process &ldquo;Run &#9654; Clean and Build Main Project&rdquo; will build a <em>jar</em> file but it won&rsquo;t configure the manifest so that</p>

<p><code>
java -jar jarfile.jar
</code></p>

<p>works even when the JDK (or JRE) is on the command line.</p>

<p>The solution discussed in the earlier post involving the modification of POM (Project Object Model) file is still viable.  It is under the Project Files folder in the Project View in NetBeans.  Load the <code>pom.xml</code> file into the NetBeans editor.</p>

<p>Quoting from the <a href="https://www.moreofless.co.uk/executable-jar-netbeans-maven-no-main-manifest-attribute/">source article</a>:</p>

<blockquote><p>You need to add the following XML snippet to your pom.xml, it can go anywhere inside the <code>&lt;project&gt;</code> element, I usually put it after the <code>&lt;properties&gt;</code> element:</p></blockquote>

<p>```xml</p>

<pre><code>&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
            &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;
            &lt;version&gt;3.2.0&lt;/version&gt;
            &lt;configuration&gt;
                &lt;archive&gt;
                    &lt;manifest&gt;
                        &lt;addClasspath&gt;true&lt;/addClasspath&gt;
                        &lt;mainClass&gt;MAIN CLASS GOES HERE&lt;/mainClass&gt;
                    &lt;/manifest&gt;
                &lt;/archive&gt;
            &lt;/configuration&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
</code></pre>

<p>```</p>

<blockquote><p>Just replace <strong>MAIN CLASS GOES HERE</strong> with your main class (with it&rsquo;s package prefix), rebuild and your JAR is now runnable. If you are unsure what to put here, just copy the Main Class settings from the Run tab in your Netbeans Project Properties.</p></blockquote>

<p>The version number above has been updated to 3.2.0 matching the latest version of the maven-jar-plugin.</p>

<p>After you do this, you can use &ldquo;Run &#9654; Clean and Build Main Project&rdquo; in NetBeans to build the <em>jar</em> file.  By changing to the Files view (instead of the Project View), you can see the target directory.</p>

<p>The name of the <em>jar</em> file will be dependent on your configuration, your project setup but in my habits project, it was <code>habits-1.0-SNAPSHOT.jar</code> which one can run from the terminal with</p>

<p><code>bash
java -jar habits-1.0-SNAPSHOT.jar
</code></p>

<p>assuming that Java has been set up to run at the command line (or you are using the terminal inside NetBeans.)</p>

<p><strong>Note</strong> that the target directory is erased as part of the clean process of &ldquo;Run &#9654; Clean and Build Main Project&rdquo; so you will need to close anything that has files in that space open before re-running the clean process.</p>

<h2>Maven Shade plugin</h2>

<p>In a <a href="https://www.baeldung.com/executable-jar-with-maven">baeldung article</a>, other solutions for making executable jar files are discussed.  The Maven Shade Plugin allows one to include dependent jar files inside the executable jar although you still need the JDK/JRE installed on the execution machine.</p>

<p>To use this approach, you edit the <code>pom.xml</code> as above but include the following instead</p>

<p>```xml
<plugin></p>

<pre><code>&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
&lt;artifactId&gt;maven-shade-plugin&lt;/artifactId&gt;
&lt;executions&gt;
    &lt;execution&gt;
        &lt;goals&gt;
            &lt;goal&gt;shade&lt;/goal&gt;
        &lt;/goals&gt;
        &lt;configuration&gt;
            &lt;shadedArtifactAttached&gt;true&lt;/shadedArtifactAttached&gt;
            &lt;transformers&gt;
                &lt;transformer implementation=
                  "org.apache.maven.plugins.shade.resource.ManifestResourceTransformer"&gt;
                    &lt;mainClass&gt;MAIN CLASS GOES HERE&lt;/mainClass&gt;
            &lt;/transformer&gt;
        &lt;/transformers&gt;
    &lt;/configuration&gt;
    &lt;/execution&gt;
&lt;/executions&gt;
</code></pre>

<p></plugin>
```
and insert the full name with package (but not .class) of the class contains the main method inside the <mainClass> container.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configuring CoolBeans 2019.6]]></title>
    <link href="https://glimmer.gwizlabs.net/blog/2019/10/17/configuring-coolbeans-2019-dot-6/"/>
    <updated>2019-10-17T22:29:00-05:00</updated>
    <id>https://glimmer.gwizlabs.net/blog/2019/10/17/configuring-coolbeans-2019-dot-6</id>
    <content type="html"><![CDATA[<blockquote><p>Now CoolBeans has been renamed OpenBeans</p></blockquote>

<p>At JDK 8, JavaFX and the JDK were together, thus already configured to build applications with both.  Since that time, they were split apart (by Oracle). Different groups took over the open-source versions of each (JDK, JavaFX, and the IDE).  Each of these components needed work, which was done on different schedules, so at this point, one has to do a bit of work to set up CoolBeans (or NetBeans) for JavaFx work.  Additionally, it has become apparent that developers need to ship the JVM with their products to reduce the pain to their users.</p>

<p>This <a href="https://gist.github.com/dgreen/e1ae4636f311d38758dafdd7b0decf0f">Gist</a> discusses the approach as well as provides the files used.</p>

<p>The approach features</p>

<ul>
<li>use of modular Java</li>
<li>latest JavaFX</li>
<li>integration with CoolBeans (Run, Debug, Generate JavaDoc, Test with TestNG)</li>
<li>an image that contains everything (for the platform it was built on) to run the program</li>
</ul>


<p>Testing is configured but not demoed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Onward to Maven in Apache NetBeans]]></title>
    <link href="https://glimmer.gwizlabs.net/blog/2019/09/15/onward-to-maven/"/>
    <updated>2019-09-15T11:23:00-05:00</updated>
    <id>https://glimmer.gwizlabs.net/blog/2019/09/15/onward-to-maven</id>
    <content type="html"><![CDATA[<blockquote><p>An update to this article is <a href="/blog/2021/07/13/update-to-using-maven-to-build-executable-jar-files/">available</a></p></blockquote>

<p>At the time of writing, <a href="https://netbeans.apache.org"><em>Apache NetBeans</em></a> is at version 11.1 and about 90% moved from Oracle to Apache.   As a project of the Apache Foundation, all source code must be licensed under the <a href="http://www.apache.org/licenses/LICENSE-2.0">Apache Foundation License</a>.  Of course, not all open source is licensed that way (and it was not the open source license used by Oracle) so there are some challenges to putting together large systems.  The <a href="https://coolbeans.xyz">CoolBeans project</a> packages NetBeans, the JDK, OpenJavaFx and other components to create an integrated product that is easier to get up and running with.  I will use NetBeans as the tool in the remainder of the post.</p>

<p>Another change made was changing the underlying preferred build automation from <a href="https://ant.apache.org">Apache Ant</a> to <a href="https://maven.apache.org">Apache Maven</a> for new projects.  This changes the file structure of the code as well as some details underneath.  NetBeans mostly allows the user to ignore this once the project is made.</p>

<p>One area that is not yet polished (IMO) is the building of a <em>jar</em> file that can be run from the command line.  The menu process &ldquo;Run &#9654; Clean and Build Main Project&rdquo; will build a <em>jar</em> file but it won&rsquo;t configure the manifest so that</p>

<p><code>
java -jar jarfile.jar
</code></p>

<p>works.</p>

<p>The <a href="https://www.moreofless.co.uk/executable-jar-netbeans-maven-no-main-manifest-attribute/">solution was posted by Steve Claridge</a> is to modify the POM (Project Object Model) file.  It is under the Project Files folder in the Project View in NetBeans.  Load the <code>pom.xml</code> file into the NetBeans editor.</p>

<p>Quoting from the article:</p>

<blockquote><p>You need to add the following XML snippet to your pom.xml, it can go anywhere inside the <project> element, I usually put it after the <properties> element:</p></blockquote>

<p>```xml</p>

<pre><code>&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
            &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;
            &lt;version&gt;2.4&lt;/version&gt;
            &lt;configuration&gt;
                &lt;archive&gt;
                    &lt;manifest&gt;
                        &lt;addClasspath&gt;true&lt;/addClasspath&gt;
                        &lt;mainClass&gt;MAIN CLASS GOES HERE&lt;/mainClass&gt;
                    &lt;/manifest&gt;
                &lt;/archive&gt;
            &lt;/configuration&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
</code></pre>

<p>```</p>

<blockquote><p>Just replace <strong>MAIN CLASS GOES HERE</strong> with your main class (with it&rsquo;s package prefix), rebuild and your JAR is now runnable. If you are unsure what to put here, just copy the Main Class settings from the Run tab in your Netbeans Project Properties.</p></blockquote>

<p>After you do this, you can use &ldquo;Run &#9654; Clean and Build Main Project&rdquo; in NetBeans to build the <em>jar</em> file.  By changing to the Files view (instead of the Project View), you can see the target directory.</p>

<p>The name of the <em>jar</em> file will be dependent on your configuration, your project setup but in my habits project, it was <code>habits-1.0-SNAPSHOT.jar</code> which one can run from the terminal with</p>

<p><code>bash
java -jar habits-1.0-SNAPSHOT.jar
</code></p>

<p>assuming that Java has been set up to run at the command line (or you are using the terminal inside NetBeans.)</p>

<p><strong>Note</strong> that the target directory is erased as part of the clean process of &ldquo;Run &#9654; Clean and Build Main Project&rdquo; so you will need to close anything that has files in that space open before re-running the clean process.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Finding Java and NetBeans]]></title>
    <link href="https://glimmer.gwizlabs.net/blog/2018/11/19/finding-java-and-netbeans/"/>
    <updated>2018-11-19T23:01:00-06:00</updated>
    <id>https://glimmer.gwizlabs.net/blog/2018/11/19/finding-java-and-netbeans</id>
    <content type="html"><![CDATA[<p>Working with NetBeans 9 with an OpenJDK 10 install on a MacOS Mojave machine.</p>

<p>I teach a course EE333 where we use Java as the basis for our efforts in learning object-oriented design and programming.  We had to migrate to NetBeans 9 as NetBeans 8.2 became unworkable in some environments and unsupported.  We also went to Java 10.  First with Oracle although on November 16, 2018 they started wanting to uninstall it and have users move to Java 11 which I gather is going to have long-term support.</p>

<p>Both the Oracle code and the OpenJDK code for MacOS have a new (to me at least) structure where it has a more Mac-like file structure with a &ldquo;Contents&rdquo; folder in between the JDK-name and the &ldquo;Home&rdquo; directory.  There is also a MacOS folder and an info.plist.</p>

<p><img src="/images/jdk10-dir-layout.png" alt="/Library/Java Directory with JDK 10 on MacOS" /></p>

<p>This means that the <code>JAVA_HOME</code> should be set a bit differently (to <code>/Library/Java/JavaVirtualMachines/jdk-10.0.2.jdk/Contents/Home</code>) in the ~/.bash_profile configuration file.</p>

<p>There were several errors in the Ant-based building in NetBeans 9 which essentially were stating that it was not possible to find the <code>java</code> executable and that the RT (runtime) version would be used instead.</p>

<p>In the build.xml file (on lines 120, 121, 127, 362, and 378 on the file I had), there was a path error that may either be just an error or more likely something that is not built correctly for the later JDK versions.  This removed a bunch of error messages.</p>

<p>An example (120, 121) of this in diff form (leading spaces removed) is</p>

<p>```diff
&ndash;  <available file="${java.home}${file.separator}${file.separator}bin${file.separator}java"/>
&ndash;  <available file="${java.home}${file.separator}${file.separator}bin${file.separator}java.exe"/>
+  <available file="${java.home}${file.separator}..${file.separator}bin${file.separator}java"/>
+  <available file="${java.home}${file.separator}..${file.separator}bin${file.separator}java.exe"/></p>

<p>```</p>

<p>But then, it looks like on restart, NetBeans did not like it and in nbproject/UPDATED.TXT it says</p>

<h1>```plain </h1>

<h1>Project ScheduleBuilder build script updated</h1>

<p>Project build script file jfx-impl.xml in nbproject sub-directory has not been recognized
as compliant with this version of NetBeans JavaFX support module. To ensure correct
and complete functionality within this NetBeans installation the script file has been
backed up to jfx-impl_backup.xml and then updated to the currently supported state.</p>

<p>FX Project build script auto-update may be triggered on project open either after
NetBeans installation update or by manual changes in jfx-impl.xml. Please note that
changing jfx-impl.xml manually is not recommended. Any build customization code should
be placed only in build.xml in project root directory.</p>

<p>Remark: The auto-update mechanism can be disabled by setting property
javafx.disable.autoupdate=true
Automatic opening of this notification when project files are updated can be disabled by setting property
javafx.disable.autoupdate.notification=true
(in build.properties, private.properties or project.properties).</p>

<p>Remark: Files nbproject/jfx-impl_backup*.xml and this file nbproject/UPDATED.TXT
are not used when building the project and can be freely deleted.
```</p>

<p>which essentially undid the changes.  Good news is that the error messages are not (yet) back.  I removed
the two files noted as removable.</p>

<p>I will try to remember to check the NetBeans 10vc3 to see if the issue still exists.</p>

<p>In the JDK11, JavaFX will be removed from the JDK and become a standalone package to maintain and install.  Both NetBeans and Java are on multi-times a year release cycle making it challenging to keep up with things for a class baseline.  Hopefully, a stability point is soon.  I know many folks are working towards this goal.</p>
]]></content>
  </entry>
  
</feed>
